  // getFromStoreByKey(key: string, options?: FromStoreOptions): Observable<CompanyReportedIncomeStatements | undefined> {

  //   // let companyOverview$: Observable<CompanyOverview | undefined>;
  //   if(options?.tryQueryRemoteStorageIfKeyNotExists) {
  //     return this.entityMap$.pipe(map(entities => entities[key])).pipe(tap(entity => this.tryQueryIfKeyNotExists(entity, key)));
  //   } else {
  //     return this.entityMap$.pipe(map(entities => entities[key]))
  //   }
  // }

  // l: EntityActionOptions

    tryQueryIfKeyNotExists(object: object | undefined, key: string) {
    if(this.checkObjectUndefined(object)) {
      this.getByKey(key)
    }

  }

  checkObjectUndefined(object: object | undefined) {

    if (object == undefined) {
      return true;
    } else {
      return false;
    }
  }

      // return this.entityMap$.pipe(map(entities => entities[key])).pipe(entity => entity? ? (entity : this.handleUndefined(key)));

    // this.keys$.pipe(tap(keys=> console.log(keys)))

    
    // return this.entityMap$.pipe(map(entities => this.handleDataFromStore(entities[key], key)));

    // return this.getByKey(key)


    // return this.entityMap$.pipe(map(entities => this.checkObjectUndefined(entities[key]) ? entities[key]! : this.handleUndefined(key)));






  handleDataFromStore(object: CompanyReportedIncomeStatements | undefined, key: string): CompanyReportedIncomeStatements {

    let cRIS: CompanyReportedIncomeStatements;

    if(object != undefined) {
      cRIS = object;

      console.log(cRIS)
      return cRIS;
    }
     else {
      return this.handleUndefined(key)

    }
  }

 // calculatePE$() {
  //   calculateEPS(sharesOutstanding$: Observable<number>, netIncome$: Observable<number>): Observable<number> {

  //     let EPS$ = combineLatest([sharesOutstanding$, netIncome$]).pipe(map(([sharesOutstanding,netIncome]) =>  netIncome / sharesOutstanding));
  
  //     return EPS$;
  //   }
  // }


  // getFromStoreByKey(key: string, options?: FromStoreOptions): Observable<CompanyReportedIncomeStatements | undefined> {

  //   // let companyOverview$: Observable<CompanyOverview | undefined>;
  //   if(options?.tryQueryRemoteStorageIfKeyNotExists) {
  //     return this.handleUndefined(this.getValueFromKeyOfObservableDictionary(this.entityMap$, key), key)
  //   } else {
  //     return this.entityMap$.pipe(map(entities => entities[key]))
  //   }
  // }

  // getAnnualNetIncome(tickerSymbol: string): Observable<number> {
    
  //   let companyReportedIncomeStatements$ = this.getCompanyReportedIncomeStatements(tickerSymbol)

  //   return companyReportedIncomeStatements$.pipe(map(cRIS => (cRIS?.annualReports[0].netIncome ? cRIS.annualReports[0].netIncome : 0 )))

  // }


  getValueFromObservableDictionary(dictionaryObservable$: Observable<Dictionary<CompanyOverview>>, key: string) {

    return dictionaryObservable$.pipe(map(entities => entities[key]));
  }



  // getValueFromKeyOfObservableDictionary(dictionaryObservable$: Observable<Dictionary<CompanyReportedIncomeStatements>>, key: string) {

  //   return dictionaryObservable$.pipe(map(entities => entities[key]? ? entities[key] : this.handleUndefined(key))));
  // }

  
  cRBS: CompanyReportedBalanceSheets = {
    symbol: 'JKJK',
    annualReports: [],
    quarterlyReports: []
  }

  balanceSheet: AnnualBalanceSheet = {
    fiscalDateEnding: '',
    reportedCurrency: '',
    totalAssets: '',
    totalCurrentAssets: '',
    cashAndCashEquivalentsAtCarryingValue: '',
    cashAndShortTermInvestments: '',
    inventory: '',
    currentNetReceivables: '',
    totalNonCurrentAssets: '',
    propertyPlantEquipment: '',
    accumulatedDepreciationAmortizationPPE: '',
    intangibleAssets: '',
    intangibleAssetsExcludingGoodwill: '',
    goodwill: '',
    investments: '',
    longTermInvestments: '',
    shortTermInvestments: '',
    otherCurrentAssets: '',
    otherNonCurrrentAssets: '',
    totalLiabilities: '',
    totalCurrentLiabilities: '',
    currentAccountsPayable: '',
    deferredRevenue: '',
    currentDebt: '',
    shortTermDebt: '',
    totalNonCurrentLiabilities: '',
    capitalLeaseObligations: '',
    longTermDebt: '',
    currentLongTermDebt: '',
    longTermDebtNoncurrent: '',
    shortLongTermDebtTotal: '',
    otherCurrentLiabilities: '',
    otherNonCurrentLiabilities: '',
    totalShareholderEquity: '',
    treasuryStock: '',
    retainedEarnings: '',
    commonStock: '',
    commonStockSharesOutstanding: ''
  }

